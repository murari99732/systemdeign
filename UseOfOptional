 public static void main(String... args) throws Exception {
        Employee[] arrayOfEmps = {
                new Employee(1, "Rahulwa", 100000),
                new Employee(2, null, 200000),
                new Employee(3, "Mark Zuckerberg", 300000)
        };

        Optional<String> s = Optional.of(arrayOfEmps[1].getName());  // if our value will always be present
        Optional<String> st = Optional.ofNullable(arrayOfEmps[1].getName()); // if our value can be null

//        String deafult = Optional.ofNullable(arrayOfEmps[1].getName()).orElseThrow(()->new IllegalArgumentException("No value present omg")); 
//     String deafult = Optional.ofNullable(arrayOfEmps[1].getName()).orElse("default"); 
// if value is null then what default value can we give or throw error
//        System.out.println(deafult);
//
//        Arrays.stream(arrayOfEmps).peek(a -> Optional.ofNullable(a.getName()).orElse("default").toUpperCase()).peek(a->System.out.println(a)).collect(Collectors.toList());

        System.out.println(s.map(a->a.toUpperCase()).orElseThrow(()->new IllegalArgumentException("Hey error"))); 
        // we do map on optional if value is not present then throw error or do something else
        
        
        
        
                Employee rahul = Arrays.stream(arrayOfEmps).filter(a -> a.name.equals("Rahul")).findAny().orElse(new Employee());
        System.out.println(rahul);
        // How to use optional in stream


    }
    
       public static void main(String... args) throws Exception {
        Consumer<Integer> consumer= t->System.out.print(t);
        
        Predicate<Integer> predicate= t->t%2==0;
        
        Supplier<Integer> supplier=()->10;
        
        List<Integer> list= Arrays.asList(1,2,3,4,5);
        list.stream().filter(predicate).forEach(consumer);
        Integer integer = list.stream().filter(a->a>10).findAny().orElseGet(supplier);
        System.out.print(integer);
    }
    
    
    //https://www.youtube.com/watch?v=4BUKaazoYyg

