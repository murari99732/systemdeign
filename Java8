tree.entrySet().stream().sorted((Collections.reverseOrder(Map.Entry.comparingByValue()))).map(Heap::getvalue).collect(Collectors.toList());

..............................................................................................................................................................	
limit(3)->only first 3

int v = map.entrySet().stream().max(Map.Entry.comparingByValue()).get().getKey();  //larget value in map

..............................................................................................................................................................	

//Use Comparator.reverseOrder() for reverse ordering
unSortedMap.entrySet() .stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())) 

..............................................................................................................................................................	

Map<Integer, Long> collect = list.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));	//list to map

..............................................................................................................................................................	

collect.entrySet().stream().sorted(Map.Entry.<Integer, Long>comparingByKey()).limit(4).forEach(System.out::println);  //sorted map
	
..............................................................................................................................................................		

when we want to find the arr[i]!=i+1
IntStream.range(0, arr.length).filter(k -> arr[k] != k + 1).mapToObj(a -> arr[a]).forEach(a->System.out.print(a+" "));;

..............................................................................................................................................................	

reduce() used when want to convert into one value
nt sum = array.stream().reduce(0, (element1, element2) -> element1 + element2); 

..............................................................................................................................................................	

partitioningBy even and odd in same stream
Map<Boolean, List<Integer>> collect = ar.stream().collect(Collectors.partitioningBy(x -> x%2==0));
{false=[3, 3, 5], true=[2, 2, 6]}

..............................................................................................................................................................	

	static void singlenumber(int brr[]) {
		List<Integer> arr= Arrays.asList( 1,2,3,4,1,2);
		int val = arr.stream().reduce(0, (a, b) -> a ^ b);
		System.out.println(val);
		int a=val& (-val);
		System.out.println(a);
		
		Map<Boolean, List<Integer>> map=arr.stream().collect(Collectors.partitioningBy(b->(b&a)==0));
		Optional<Integer> v=map.get(false).stream().reduce((n,m)->n^m);
		Optional<Integer> w=map.get(true).stream().reduce((n,m)->n^m);
		System.out.println(v+" "+w);
		

	}
..............................................................................................................................................................	
	
	list to map (collection grouping)
	 List<String> items =
                Arrays.asList("apple", "apple", "banana",
                        "apple", "orange", "banana", "papaya");

        Map<String, Long> result =
                items.stream().collect(
                        Collectors.groupingBy(
                                Function.identity(), Collectors.counting()
                        )
                );
				
				papaya=1, orange=1, banana=2, apple=3
				
				
				Map<String, Long> collect = Arrays.stream(string.split("")).collect(Collectors.groupingBy(b->b, Collectors.counting()));

..............................................................................................................................................................				
				
maptoObj				
private static void mumble(String word) {
		String result = IntStream.range(0, word.length()).mapToObj(i -> accumCharacter(word, i)) // EACH INDEX
				.collect(Collectors.joining("-"));

		System.out.println("mumble for 'abcd' = " + result);
	}

	private static String accumCharacter(String word, int index) {
		String b = IntStream.range(0, index + 1) // [0, 1] [0, 2] [0, 3] [0, 4]
				.mapToObj(i -> i == 0 ? Character.toUpperCase(word.charAt(index))
						: Character.toLowerCase(word.charAt(index)))
				.map(String::valueOf).collect(Collectors.joining());
		System.out.println(b);
		return b;
	}
	
	A-BB-CCC-DDDD

...............................................................................................................................................................	

Arrays to array mapping	
IntStream.range(0, arr.length).mapToObj(a -> brr[a] = arr[a]).forEach(a -> System.out.println(a));

.................................................................................................................................................................

ArrayList<ArrayList<String >> ar= new ArrayList<ArrayList<String>>();
	ar.stream().flatMap(Stream::of).forEach(a->System.out.println(a));
	
	
.................................................................................................................................................................
 IntStream.range(0, ar.size()).mapToObj(a -> a == 0 ? br.add(ar.get(a)) : processgh(br, a, ar.get(a))).forEach(a->System.out.println(a));
		//System.out.println(collect);

	}

	static ArrayList<Cordinate1> processgh(ArrayList<Cordinate1> br, int index, Cordinate1 curr) {
		Cordinate1 dr = br.get(br.size()-1);
		if (dr.x < curr.x && dr.y >= curr.x) {
			br.remove(br.size() - 1);
			br.add(new Cordinate1(dr.x, curr.y));
		} else if (dr.x < curr.x && dr.y > curr.x) {

		} else if (dr.x < curr.x && dr.y < curr.x) {
			br.add(new Cordinate1(curr.x, curr.y));
		}
		else
		{
			
		}
		return br;
	}
[Cordinate1 [x=0, y=12], Cordinate1 [x=13, y=26]]
